name: cd-wheel

permissions:
  contents: read

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      mpiname:
        description: 'MPI Name'
        required: false
        type: choice
        default: 'mpich'
        options:
          - mpich
          - openmpi
      version:
        description: 'MPI Version'
        required: false
        type: string
        default: ''
      release:
        description: 'Release number'
        required: false
        type: string
        default: ''
      os-arch:
        description: 'Target OS-Architecture'
        required: false
        type: choice
        default: Linux-x86_64
        options:
          - '*'
          - Linux
          - Linux-aarch64
          - Linux-x86_64
          - macOS
          - macOS-arm64
          - macOS-x86_64
  workflow_call:
    inputs:
      mpiname:
        description: 'MPI Name'
        required: false
        type: string
        default: 'mpich'
      version:
        description: 'MPI Version'
        required: false
        type: string
        default: ''
      release:
        description: 'Release number'
        required: false
        type: string
        default: ''
      os-arch:
        description: 'Target OS-Architecture'
        required: false
        type: string
        default: ''

env:
  MPINAME: '${{ inputs.mpiname }}'
  VERSION: '${{ inputs.version }}'
  RELEASE: '${{ inputs.release }}'

jobs:

  setup:
    runs-on: 'ubuntu-latest'
    outputs:
      matrix: ${{ steps.setup.outputs.matrix }}
    steps:
    - uses: step-security/harden-runner@v2
      with: {egress-policy: audit}
    - id: setup
      shell: python
      name: 'setup build matrix'
      run: |
        # setup build matrix # "
        keys = ("os", "arch", "runner")
        rows = [
            ("Linux", "aarch64", "ubuntu-24.04-arm"),
            ("Linux", "x86_64",  "ubuntu-24.04"),
            ("macOS", "arm64",   "macos-15"),
            ("macOS", "x86_64",  "macos-13"),
        ]
        os, _, arch = "${{ inputs.os-arch }}".partition("-")
        if os not in ("", "*", "all"):
            rows = [row for row in rows if row[0] == os]
        if arch not in ("", "*", "all"):
            rows = [row for row in rows if row[1] == arch]
        matrix = [dict(zip(keys, row)) for row in rows]
        import os, json
        with open(os.getenv("GITHUB_OUTPUT"), "w") as out:
            print(f"matrix={json.dumps(matrix)}", file=out)
        # "

  build:
    needs: setup
    if: ${{ needs.setup.outputs.matrix != '[]' }}
    name: build-${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.setup.outputs.matrix) }}

    steps:

    - uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - id: checkout
      uses: actions/checkout@v5

    - id: setup-macOS
      if: ${{ runner.os == 'macOS' }}
      name: setup-macOS
      run: |
        # set macOS deployment target
        echo MACOSX_DEPLOYMENT_TARGET=11.0 >> $GITHUB_ENV
        # create gfortran symlink
        cd $(brew --prefix)/bin
        gfortran=$(ls gfortran-* | sort | head -n 1)
        sudo ln -s $gfortran gfortran
        # unlink libevent
        brew unlink libevent || true
        # install autotools
        command -v autoconf || brew install autoconf
        command -v automake || brew install automake
        command -v libtool  || brew install libtool
        # install uv
        brew install uv

    - id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: 3

    - id: bootstrap
      run: ./bootstrap.sh

    - id: source-date-epoch
      run: |
        read -r SOURCE_DATE_EPOCH < source-date-epoch || true
        SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH:-$(git log -1 --pretty=%ct)}
        echo SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH >> $GITHUB_ENV
        test $(uname) = Darwin && (echo ZERO_AR_DATE=1 >> $GITHUB_ENV)
        echo [SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH] $(
        date -u -d @$SOURCE_DATE_EPOCH 2>/dev/null ||
        date -u -r  $SOURCE_DATE_EPOCH 2>/dev/null )
      working-directory: package/source

    - id: build
      uses: pypa/cibuildwheel@v3.1.3
      timeout-minutes: 30
      with:
        package-dir: package
        output-dir:  wheelhouse
      env:
        CIBW_BUILD_FRONTEND: "build[uv]"
        CIBW_BUILD: "cp313-*"
        CIBW_SKIP:  "*musllinux*"
        CIBW_ARCHS: "${{ matrix.arch }}"
        CIBW_BEFORE_ALL: >-
          bash {project}/cibw-build-mpi.sh
        CIBW_BEFORE_BUILD: >-
          bash {project}/cibw-patch-cmd.sh
        CIBW_TEST_COMMAND: >-
          bash {project}/cibw-check-mpi.sh
        CIBW_ENVIRONMENT_LINUX: >-
          SOURCE="/project/package/source"
          WORKDIR="/project/package/workdir"
          DESTDIR="/project/package/install"
        CIBW_ENVIRONMENT_MACOS: >-
          SOURCE="$PWD/package/source"
          WORKDIR="$PWD/package/workdir"
          DESTDIR="$PWD/package/install"
        CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux_2_28"
        CIBW_MANYLINUX_X86_64_IMAGE:  "manylinux_2_28"

    - id: sha256sum
      run: |
        # sha256sum
        test $(uname) == Darwin && sha256sum() { shasum -a 256 $@; } || true
        sha256sum -b *.whl
      working-directory: wheelhouse

    - id: upload
      uses: actions/upload-artifact@v4
      with:
        name: "wheel-\
              ${{ steps.bootstrap.outputs.mpiname }}-\
              ${{ steps.bootstrap.outputs.version }}-\
              ${{ matrix.os }}-${{ matrix.arch }}"
        path: wheelhouse/*.whl

    - id: check
      run: ./wheel-check.sh wheelhouse

    - id: test
      run: |
        # ./wheel-test.sh
        test $(uname) = Linux && runner=(
        docker run
        -e MPINAME=${{ steps.bootstrap.outputs.mpiname }}
        -e VERSION=${{ steps.bootstrap.outputs.version }}
        -e RELEASE=${{ steps.bootstrap.outputs.release }}
        -v $(pwd):/${{ github.workspace }}
        -w ${{ github.workspace }}
        --platform linux/${{
        matrix.arch == 'aarch64' && 'arm64' ||
        matrix.arch == 'x86_64'  && 'amd64'
        }} python:3)
        ${runner[@]:-} ./wheel-test.sh wheelhouse
